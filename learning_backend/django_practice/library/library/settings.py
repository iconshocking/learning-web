"""
Django settings for library project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret in the .env file!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-^*68rdzx%42l%eoyoaf!1oa=emro+b7*i&6%^%ba3!0d_i62w5",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "") == "True"
PROD = os.environ.get("DJANGO_ENV", "") == "prod"
HTTPS_REQUIRED = os.environ.get("HTTPS_REQUIRED", "False") == "True"

# defines the IP addresses or domain names that can be used to access the Django web application
ALLOWED_HOSTS = ["127.0.0.1", "nginx"]
# only set this if you need to allow forms submitted from other sub/domains (like an API) - it is
# safest by default because it requires that 'Origin' header matches the 'Host' header on
# POST/unsafe requests (which is only true on same-origin requests)
# - NOTE: if 'Origin' is not present, checks that the 'Referer' header matches the 'Host' header
# - NOTE: non-browser requests are not a security risk for this because they have no cookies and so
# can't perform CSRF attacks
CSRF_TRUSTED_ORIGINS = []

if DEBUG:
    # hack to allow debug toolbar to work with Docker since the IP calculation seems to fail every
    # few months - year
    INTERNAL_IPS = type("AlwaysTrue", (), {"__contains__": lambda *a: True})()

# only send over HTTPS
CSRF_COOKIE_SECURE = HTTPS_REQUIRED
SESSION_COOKIE_SECURE = HTTPS_REQUIRED

# something low to make sure it doesn't break anything
SECURE_HSTS_SECONDS = 600 if HTTPS_REQUIRED else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = HTTPS_REQUIRED
# ONLY enable this if you are ABSOLUTELY sure that your site will only be served over HTTPS (the
# minimum requirement is 1 year, so this is a very strong commitment)
SECURE_HSTS_PRELOAD = False

# should have this on in production
SECURE_SSL_REDIRECT = HTTPS_REQUIRED
# only use if behind a reverse proxy that strips any client-set header and sets
# 'X-Forwarded-Proto' manually when connection is HTTPS
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# this is the same order that templates/statics are searched for
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.admindocs",
    "django.contrib.auth",
    # required to support permissions associated with models and generic relation fields
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    # required to serve statics
    "django.contrib.staticfiles",
    "catalog.apps.CatalogConfig",
    # importing 'practice' as a reusable package
    "practice.apps.PracticeConfig",
    "core.apps.CoreConfig",
    "debug_toolbar",
]

MIDDLEWARE = [
    # debug_toolbar must come as soon as possible in the middleware list, but behind any encoding
    # middleware (like gzip)
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.admindocs.middleware.XViewMiddleware",
]

AUTH_USER_MODEL = "core.User"

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/core/accounts/login/"

# entry point to URLConf construction
ROOT_URLCONF = "library.urls"

TEMPLATES = [
    {
        # engine for template rendering
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # look in the project dir for anything app-agnostic
        "DIRS": [BASE_DIR / "templates"],
        # set this to False if putting all templates at the project level
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            # Cached template loader is enabled by default when DEBUG = False and stores compiled
            # templates in memory to skip the file system on successive calls (does not reference
            # CACHES setting - always in-memory)
            # - NOTE: built-in template tags are safe to use with cached loader, but make sure any
            #   custom tags are thread-safe (if multi-threading)
            #
            # "loaders": [ ( "django.template.loaders.cached.Loader", [
            #     "django.template.loaders.filesystem.Loader",
            #         "django.template.loaders.app_directories.Loader", "path.to.custom.Loader", ],
            #         ), ],
        },
    },
]


WSGI_APPLICATION = "library.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST"),
        "PORT": os.environ.get("POSTGRES_PORT"),
        # defaults to 0; set to something or None if you want connection reuse
        "CONN_MAX_AGE": 0,
        # usually set this to True if you want to use persistent connections, but check for performance penalties
        "CONN_HEALTH_CHECKS": False,
    }
}

if PROD:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            # 'redis://' is TCP connection w/o SSL while 'rediss://' has SSL
            "LOCATION": "redis://"
            + os.environ.get(
                "DJANGO_REDIS_USERNAME",
                "",
            )
            + ":"
            + os.environ.get(
                "DJANGO_REDIS_PASSWORD",
                "",
            )
            + "@"
            + os.environ.get("REDIS_HOST", "")
            + ":"
            + os.environ.get("REDIS_PORT", ""),
            # can pass an array to 'LOCATION' of a lead server for writes, followed by replicas for
            # reads
        }
    }

STORAGES = {
    # storage for uploaded files from models
    "default": {
        # custom storage from 'django-storages' package (ideally should use, but requires extra configuration)
        # "BACKEND": "storages.backends.s3.S3Storage" if PROD else "django.core.files.storage.FileSystemStorage"
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # cache busts statics
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
    },
}

# write-through cache to the db, but cache-only for reads
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# for any top-level static files
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
# where static files will be collected for deployment
STATIC_ROOT = BASE_DIR / "prod/static"
STATIC_URL = os.environ.get("STATICS_URL", "") if PROD else "static/"

# path root for uploaded files
MEDIA_ROOT = "/user-media/" if PROD else BASE_DIR / "/user-media"
# should be served from a different domain to avoid subdomain-based attacks
MEDIA_URL = os.environ.get("MEDIA_URL", "") if PROD else "user-media/"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# writes emails to the console instead of sending them, useful for debugging
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# set to None to set up your own logging solution (equivalent to LOGGING.disable_existing_loggers, I think)
#
# LOGGING_CONFIG = None

LOGGING = {
    "version": 1,
    # usually don't want to disable since the loggers still exist and ingest logs but ONLY discard
    # them and can prevent propagation
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} process:{process:d} {message}",
            # f-string formatting
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            # "()" refers to the callable
            "()": "django.utils.log.RequireDebugTrue",
            # any other key would refer to a parameter argument for the callable
        },
        # custom filter example
        #
        # "special": {
        #     "()": "project.logging.SpecialFilter",
        #     "foo": "bar",
        # },
    },
    "handlers": {
        "console": {
            # anything that meets OR exceeds the level will be handled
            "level": "INFO",
            "filters": ["require_debug_true"],
            # StreamHandler prints to stderr by default
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "WARNING",
            # technically shouldn't log to a file like this when using gunicon due to the multiple
            # processes, but leaving it for simplicity
            "class": "logging.FileHandler",
            # note that this is relative to the directory where the Django project start script is
            # called, NOT the settings file
            "filename": "./log/django-errors.log",
            "formatter": "verbose",
        },
        # "mail_admins": {
        #     "level": "ERROR",
        #     "class": "django.utils.log.AdminEmailHandler",
        # },
    },
    # top-level logging object (name does not have any relation to module, so make sure to propagate
    # any log you don't consider completely "handled")
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "propagate": True,
        },
        # BEWARE: failing email logging appears to prevent propagation (DON'T USE EMAIL LOGGING)
        #
        # "django.request": {
        #     "handlers": ["mail_admins"],
        #     "level": "ERROR",
        #     "propagate": True,
        # },
        # custom logger example
        #
        # "myproject.custom": {
        #     "handlers": ["console", "mail_admins"],
        #     "level": "INFO",
        #     "filters": ["special"],
        # },
    },
}

# NOTE: not recommended to use these unless you really don't need a better alerting system (which
# you almost ALWAYS do)
#
# email list for receiving reports of 500 errors
ADMINS = [("Conrad", "shockconrad@gmail.com")]
# email list for receiving reports of 404 errors
MANAGERS = [("Conrad", "shockconrad@gmail.com")]
